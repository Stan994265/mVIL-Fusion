%YAML:1.0
#common parameters
imu_topic: "/mynteye/imu/data_raw"
image_topic: "/mynteye/left/image_mono"
lidar_topic: "/full_cloud" #fixed

use_mynteye_adapter: 1
# mynteye_imu_srv: "d"
model_type: PINHOLE
camera_name: pinhole
image_width: 640
image_height: 480
distortion_parameters:
   k1: -0.29326213
   k2: 0.07505211
   p1: 0.0002761
   p2: -0.00026777
projection_parameters:
   fx: 356.37000498
   fy: 354.92225534
   cx: 326.87903275
   cy: 250.93806883

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam

extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.99999072, -0.00209387, -0.00376471, -0.00208308, -0.99999371, 0.0028693, -0.0037707, -0.00286143, -0.9999888]
   # data: [ 0.9996, 0.0171, 0.0177, 0.0174, -0.9998, -0.0172, 0.0174, 0.0174, -0.9997]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -0.04571386, 0.01268073, -0.01535602 ]

gt_rli: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -0.0320631, 0.000946093, -0.999485, -0.999482, -0.00274554, 0.0320604, -0.0027138, 0.999996, 0.00103363]
gt_tli: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 0.2, -0.005, -0.1 ]

gt_rlc: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -2.8296031346462358e-02, 1.9810082637694015e-03, 9.9959762415498910e-01, -9.9958805890293911e-01, 4.7465775695679779e-03, -2.8305167373297024e-02, -4.8007404318812230e-03, -9.9998677271633696e-01, 1.8458828973551000e-03]
gt_tlc: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [  2.7653783559799194e-01, 4.0949359536170959e-02, -8.7526209652423859e-02 ]


#feature traker paprameters
max_cnt: 150           # 150 max feature number in feature tracking
min_dist: 30            # 30 min distance between two features 
freq: 10                #indoor:15 outdoor:10  # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # 1：publish tracking image as topic 0：publish lidar tracked image(green)
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.05  # max solver itration time (ms), to guarantee real time
max_num_iterations: 30   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.02065          # accelerometer measurement noise standard deviation. #0.599298904976
gyr_n: 0.00519        # gyroscope measurement noise standard deviation.     #0.198614898699
# acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.599298904976
# gyr_n: 0.01        # gyroscope measurement noise standard deviation.     #0.198614898699
acc_w: 0.00667         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.00088056       # gyroscope bias random work noise standard deviation.     #4.0e-5


#initialization parameters
PBC_UX: -0.04
PBC_LX: -0.06
PBC_UY: 0.01
PBC_LY: -0.01
PBC_UZ: 0.01
PBC_LZ: -0.01
PLB_UX: 0.15
PLB_LX: 0.08
PLB_UY: 0.03
PLB_LY: -0.03
PLB_UZ: -0.10
PLB_LZ: -0.17
g_norm: 9.795    # gravity magnitude  9.7944
g_direction: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0,0.0,0.0]
ANGLE_VI: 30


#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.00003                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.5      # size of camera marker in RVIZ

#lidar compensator parameters
LidarTimeStep: 0.1
MinDistance: 0.5
MaxDistance: 70.0

#fast-gicp
LeafSize: 0.3
NumThreads: 4
TransformationEpsilon: 0.0005
MaxCorrespondenceDistance: 0.8

#lidar constraint 
show_lidar_constraint: 1 #white(lidar icp fail) green(VIO good) red(VIO drift) blue(zero velocity) purple(pure rotation)
show_lidar2cam: 1 #show unit sphere pointcloud and tem_lidar_map project to camera image

add_lidar2cam: 1
add_lidar2lidar: 1 
add_lps: 1

